CREATE COMPUTE MODULE WSIB_ACES_AuditLogging_SubFlow_Compute
      CREATE FUNCTION Main() RETURNS BOOLEAN
      BEGIN
            CALL CopyMessageHeaders();
            DECLARE rc,rc2 BOOLEAN;
           	DECLARE MessageFlowLabel, loggerAppender, logLevel, tempChar, lf CHARACTER '' ;
           	DECLARE currentTimeStamp GMTTIMESTAMP;
			DECLARE convertedTimeStamp GMTTIMESTAMP;
			CALL GMT_EST(currentTimeStamp, convertedTimeStamp );
            SET lf = CAST( x'0D' AS CHAR CCSID 1208); 
            
            SET MessageFlowLabel = InputRoot.MQRFH2.usr.MessageFlowLabel;
            SET loggerAppender = InputRoot.MQRFH2.usr.loggerAppender ;
            SET logLevel = InputRoot.MQRFH2.usr.logLevel;
           CALL initLog4j(ConfigFileLocation) INTO rc;
            IF rc = TRUE THEN
	           SET tempChar = CAST(ASBITSTREAM(InputRoot.XMLNSC 
	           						CCSID InputRoot.Properties.CodedCharSetId 
	           						ENCODING InputRoot.Properties.Encoding) 
	           						AS CHARACTER 
	           						CCSID InputRoot.Properties.CodedCharSetId 
	           						ENCODING InputRoot.Properties.Encoding);
	           SET Environment.Variables.Log4j.LogText =COALESCE(InputRoot.XMLNSC.AuditHdr.AuditTime||' [START]'||tempChar||'[END]', 'Blank Value');
	 			
	 			CALL log4j_1_1(InputRoot.XMLNSC.AuditHdr.AuditTime,loggerAppender,logLevel,Environment.Variables.Log4j.LogText) INTO rc2;
            ELSE 
            	THROW USER EXCEPTION MESSAGE 9999 VALUES ('ConfigFile Initialization Failed');
            END IF;
            IF rc2 = FALSE THEN
				THROW USER EXCEPTION MESSAGE 9998 VALUES ('File Logging Failed for LoggerAppender' || loggerAppender);
			END IF ;
            RETURN TRUE;
      END;

      CREATE PROCEDURE CopyMessageHeaders() BEGIN
            DECLARE I INTEGER 1;
            DECLARE J INTEGER;
            SET J = CARDINALITY(InputRoot.*[]);
            WHILE I < J DO
                  SET OutputRoot.*[I] = InputRoot.*[I];
                  SET I = I + 1;
            END WHILE;
      END;

      CREATE PROCEDURE CopyEntireMessage() BEGIN
            SET OutputRoot = InputRoot;
      END;
END MODULE;