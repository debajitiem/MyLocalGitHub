/*EATE FUNCTION Main() RETURNS BOOLE*/
	BEGIN
		
--		CALL CopyMessageHeaders() ;
		SET OutputRoot.Properties.CodedCharSetId = COALESCE(InputRoot.Properties.CodedCharSetId, 1208);
		SET OutputRoot.Properties.Encoding = COALESCE(InputRoot.Properties.Encoding, 273);
				
		SET OutputRoot.MQMD.Format = 'MQSTR';
		SET OutputRoot.MQMD.CodedCharSetId = COALESCE(InputRoot.MQMD.CodedCharSetId, COALESCE(InputRoot.Properties.CodedCharSetId, 1208));		
		SET OutputRoot.MQMD.Encoding = COALESCE(InputRoot.MQMD.Encoding, COALESCE(InputRoot.Properties.Encoding, 273));
		
		SET OutputRoot.MQRFH2.usr.(Field)MessageFlowLabel = MessageFlowLabel;
        SET OutputRoot.MQRFH2.usr.(Field)errorLoggerAppender = errorLoggerAppender;
        SET OutputRoot.MQRFH2.usr.(Field)errorLogLevel = errorLogLevel;
        SET OutputRoot.MQRFH2.usr.(Field)emailFlag = EmailFlag;
        SET OutputRoot.MQRFH2.usr.(Field)Error_email_to_id = Error_email_to_id ;
		SET OutputRoot.MQRFH2.usr.(Field)Error_email_cc_id = Error_email_cc_id ;
		SET OutputRoot.MQRFH2.usr.(Field)Error_email_from_id = Error_email_from_id ;
		SET OutputRoot.MQRFH2.usr.(Field)Error_email_subject = Error_email_subject ;
		CALL CreateExceptionMessage();
		RETURN TRUE;
	END;
	
	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;
	/**
	Procedure Name: CreateExceptionMessage
	Usage: This module is responsible for preparing and populate with exception details with error code and error description
	Input payload is converted into BLOB. If Message is 'SOAP', 'XMLNSC' Unique Identifier will be Reply identifier (in case of web Service)
	and if its MQMD Message then message ID will be Unique Identifier.
	**/

	CREATE PROCEDURE CreateExceptionMessage() BEGIN
		
		DECLARE currentTimeStamp GMTTIMESTAMP;
		DECLARE convertedTimeStamp GMTTIMESTAMP;
		CALL GMT_EST(currentTimeStamp, convertedTimeStamp );
		
		/* SOAP input*/
	IF EXISTS(InputLocalEnvironment.File[]) THEN
		SET Environment.Variables.ExceptionData.PutApplName = COALESCE(InputLocalEnvironment.File.Directory, 'N/A');
		SET Environment.Variables.ExceptionData.comm_protocol = 'FTP';
		SET Environment.Variables.ExceptionData.ERROR_ID = SUBSTRING(UUIDASCHAR FROM 3 FOR 47);
	ELSEIF Environment.Variables.Database.DatabaseFlag = TRUE THEN
		SET Environment.Variables.ExceptionData.PutApplName = COALESCE(Environment.Variables.Log.PutApplName, 'N/A');
		SET Environment.Variables.ExceptionData.comm_protocol = 'N/A';
		SET Environment.Variables.ExceptionData.ERROR_ID = SUBSTRING(UUIDASCHAR FROM 3 FOR 47);
	ELSEIF EXISTS(InputRoot.MQMD[]) THEN
		SET Environment.Variables.ExceptionData.PutApplName = COALESCE(InputRoot.MQMD.PutApplName, 'N/A');
		SET Environment.Variables.ExceptionData.comm_protocol = 'MQ';
		SET Environment.Variables.ExceptionData.ERROR_ID = SUBSTRING(UUIDASCHAR FROM 3 FOR 47) ;
	ELSEIF(EXISTS(InputRoot.HTTPInputHeader[])) THEN
		SET Environment.Variables.ExceptionData.PutApplName = COALESCE(InputRoot.HTTPInputHeader."X-Original-HTTP-Command", 'N/A');
		SET Environment.Variables.ExceptionData.comm_protocol = 'HTTP';
		SET Environment.Variables.ExceptionData.ERROR_ID = SUBSTRING(UUIDASCHAR FROM 3 FOR 47) ;
	ELSE
		SET Environment.Variables.ExceptionData.PutApplName = 'N/A';
		SET Environment.Variables.ExceptionData.comm_protocol = 'N/A';
		SET Environment.Variables.ExceptionData.ERROR_ID = SUBSTRING(UUIDASCHAR FROM 3 FOR 47);
	END IF;
	
	IF (Environment.Variables.ExceptionData.ParserFlag = TRUE) THEN
		CALL CHECK_PARSING_FORMATS();
	END IF;
	
	SET OutputRoot.XMLNSC.ExceptionHdr.Source = Environment.Variables.ExceptionData.PutApplName;
	SET OutputRoot.XMLNSC.ExceptionHdr.ErrorId = Environment.Variables.ExceptionData.ERROR_ID ;
	SET OutputRoot.XMLNSC.ExceptionHdr.ErrorCode = Environment.Variables.ExceptionData.ErrorCode ;
	SET OutputRoot.XMLNSC.ExceptionHdr.ErrorDesc = Environment.Variables.ExceptionData.ErrorDesc ;
	SET OutputRoot.XMLNSC.ExceptionHdr.BrokerName = BrokerName ;
	SET OutputRoot.XMLNSC.ExceptionHdr.ComponentName = ExecutionGroupLabel ;
	SET OutputRoot.XMLNSC.ExceptionHdr.Severity = Environment.Variables.ExceptionData.SEVERITY ;
	SET OutputRoot.XMLNSC.ExceptionHdr.Category = Environment.Variables.ExceptionData.ErrorCategory ;
	SET OutputRoot.XMLNSC.ExceptionHdr.FlowName = MessageFlowLabel ;
	SET OutputRoot.XMLNSC.ExceptionHdr.ExceptionList = COALESCE(Environment.Variables.ExceptionData.ExceptionList, 'Exception message not captured') ;
	SET OutputRoot.XMLNSC.ExceptionHdr.ExceptionTime =  CAST(convertedTimeStamp AS CHARACTER FORMAT 'IU');
	IF EXISTS(InputRoot.XMLNSC[]) THEN
		SET OutputRoot.XMLNSC.ExceptionHdr.(XMLNSC.CDataField)Payload = COALESCE(Environment.Variables.ExceptionData.wholeMsgChar, 'Unable to capture payload') ;
	ELSE
		SET OutputRoot.XMLNSC.ExceptionHdr.Payload = COALESCE(Environment.Variables.ExceptionData.wholeMsgChar, 'Unable to capture payload') ;
	END IF;
	SET OutputRoot.XMLNSC.ExceptionHdr.CommProtocol = COALESCE(Environment.Variables.ExceptionData.comm_protocol, 'N/A') ;
	
	SET Environment.Variables.ExceptionData.wholeMsgChar = null;
END;


CREATE PROCEDURE CHECK_PARSING_FORMATS() BEGIN
	DECLARE wholeMsgBlob BLOB ;
	DECLARE wholeMsgChar,PutApplName,uniqueID, AuditMessage CHARACTER ;
	IF (FIELDNAME(InputRoot.*[<]) = 'BLOB') THEN
		SET Environment.Variables.ExceptionData.wholeMsgBlob = InputRoot."BLOB"."BLOB";
		SET Environment.Variables.ExceptionData.wholeMsgChar = CAST(REPLACE(Environment.Variables.ExceptionData.wholeMsgBlob , x'0d0a',x'')  AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId ENCODING InputRoot.Properties.Encoding);
	ELSEIF (FIELDNAME(InputRoot.*[<]) = 'DFDL') THEN
		SET Environment.Variables.ExceptionData.wholeMsgBlob = ASBITSTREAM(InputRoot.DFDL ENCODING InputRoot.Properties.Encoding CCSID InputRoot.Properties.CodedCharSetId
																		SET InputRoot.Properties.MessageSet TYPE InputRoot.Properties.MessageType
																		FORMAT InputRoot.Properties.MessageFormat);
		SET Environment.Variables.ExceptionData.wholeMsgChar = CAST(REPLACE(Environment.Variables.ExceptionData.wholeMsgBlob , x'0d0a',x'')  AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId ENCODING InputRoot.Properties.Encoding);
	ELSEIF EXISTS(InputRoot.MRM[]) THEN
		SET Environment.Variables.ExceptionData.wholeMsgBlob = ASBITSTREAM(InputRoot.MRM ENCODING InputRoot.Properties.Encoding CCSID InputRoot.Properties.CodedCharSetId
																		SET InputRoot.Properties.MessageSet TYPE InputRoot.Properties.MessageType
																		FORMAT InputRoot.Properties.MessageFormat);
		SET Environment.Variables.ExceptionData.wholeMsgChar = CAST(REPLACE(Environment.Variables.ExceptionData.wholeMsgBlob , x'0d0a',x'') AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId ENCODING InputRoot.Properties.Encoding);
	ELSEIF EXISTS(InputRoot.XMLNSC[]) OR EXISTS(InputRoot.XMLNS[]) OR EXISTS(InputRoot.XML[]) THEN
		SET Environment.Variables.ExceptionData.wholeMsgBlob = ASBITSTREAM(InputRoot.XMLNSC ENCODING InputRoot.Properties.Encoding CCSID InputRoot.Properties.CodedCharSetId
																		SET InputRoot.Properties.MessageSet TYPE InputRoot.Properties.MessageType
																		FORMAT InputRoot.Properties.MessageFormat);
		SET Environment.Variables.ExceptionData.wholeMsgChar = CAST(REPLACE(Environment.Variables.ExceptionData.wholeMsgBlob , x'0d0a',x'') AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId ENCODING InputRoot.Properties.Encoding);
	ELSEIF EXISTS(InputRoot.SOAP[]) THEN
		SET Environment.Variables.ExceptionData.wholeMsgBlob = ASBITSTREAM(InputRoot.SOAP ENCODING InputRoot.Properties.Encoding CCSID InputRoot.Properties.CodedCharSetId
																		SET InputRoot.Properties.MessageSet TYPE InputRoot.Properties.MessageType
																		FORMAT InputRoot.Properties.MessageFormat);
		SET Environment.Variables.ExceptionData.wholeMsgChar = CAST(REPLACE(Environment.Variables.ExceptionData.wholeMsgBlob , x'0d0a',x'') AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId ENCODING InputRoot.Properties.Encoding);
	
	END IF;

END;
