CREATE COMPUTE MODULE WSIB_AuditLogging_Compute

	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE CNF_IDR CHARACTER '' ;
		SET Environment.Variable.CNF_VAL = 1 ; 
		
		IF NOT EXISTS(Config_Data.Data[]) OR NOT EXISTS(Config_Data.SWITCH[]) THEN
			SET Config_Data.Data[] = SELECT config.CNF_IDR, config.CNF_VAL FROM Database.{schema_var}.WSIB_CONFIGURATION AS config 
			WHERE config.Interface_ID = 'AUDIT_CONFIG' ;
			SET Config_Data.SWITCH[] = SELECT config.CNF_IDR, config.CNF_VAL FROM Database.{schema_var}.WSIB_CONFIGURATION AS config 
			WHERE config.Interface_ID = 'AUDIT_SWITCH';
		END IF ;
		
		SET Environment.Variable[] = SELECT config.CNF_VAL FROM Config_Data.Data[] AS config where config.CNF_IDR = 'LOGLEVEL_' || ApplicationLabel ;
		
		SET OutputRoot.Properties.CodedCharSetId = COALESCE(InputRoot.Properties.CodedCharSetId, 1208);
		SET OutputRoot.Properties.Encoding = COALESCE(InputRoot.Properties.Encoding, 273);
		
		SET OutputRoot.MQMD.Format = 'MQSTR';
		SET OutputRoot.MQMD.CodedCharSetId = COALESCE(InputRoot.MQMD.CodedCharSetId, COALESCE(InputRoot.Properties.CodedCharSetId, 1208));		
		SET OutputRoot.MQMD.Encoding = COALESCE(InputRoot.MQMD.Encoding, COALESCE(InputRoot.Properties.Encoding, 273));
		
		SET OutputRoot.MQRFH2.usr.(Field)MessageFlowLabel = MessageFlowLabel;
        SET OutputRoot.MQRFH2.usr.(Field)loggerAppender = loggerAppender;
        SET OutputRoot.MQRFH2.usr.(Field)logLevel = logLevel;        
		IF Config_Data.SWITCH[1].CNF_VAL = FALSE THEN
			RETURN FALSE;
		ELSEIF Environment.Variables.Log.TransactionLevel IN (1,9) AND Environment.Variable.CNF_VAL = 1 THEN
			CALL prepareAuditMessage();
		ELSEIF Environment.Variable.CNF_VAL IN ( 2, 3) THEN
			CALL prepareAuditMessage();
		ELSE 
			RETURN FALSE;
		END IF;
			
		SET Environment.Variables.AuditData.wholeMsgChar = NULL;
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
	
	CREATE PROCEDURE CopyMessageHeaders() BEGIN
            DECLARE I INTEGER 1;
            DECLARE J INTEGER;
            SET J = CARDINALITY(InputRoot.*[]);
            WHILE I < J DO
                  SET OutputRoot.*[I] = InputRoot.*[I];
                  SET I = I + 1;
            END WHILE;
      END;
	/**
	Procedure Name: prepareAuditMessage
	Usage: This Procedure is use to Prepare Audit message.
	**/
	CREATE PROCEDURE prepareAuditMessage() BEGIN
	DECLARE AuditMessage CHARACTER ;
	DECLARE currentTimeStamp GMTTIMESTAMP;
	DECLARE convertedTimeStamp GMTTIMESTAMP;
	CALL GMT_EST(currentTimeStamp, convertedTimeStamp );
	
	IF Environment.Variables.Database.DatabaseFlag = TRUE THEN
		SET Environment.Variables.AuditData.wholeMsgChar = 'N/A';
		SET Environment.Variables.AuditData.PutApplName = COALESCE(Environment.Variables.Log.PutApplName, 'N/A') ; 
		SET Environment.Variables.AuditData.transaction_Level =COALESCE(Environment.Variables.Log.TransactionLevel, 'N/A');
		SET Environment.Variables.AuditData.comm_protocol = 'N/A';
		SET Environment.Variables.AuditData.AuditMessage = COALESCE(Environment.Variables.Log.AuditMessage, 'N/A') ;
		SET Environment.Variables.AuditData.uniqueID =COALESCE(Environment.Variables.Log.uniqueID, 'N/A');
		
	ELSEIF EXISTS(InputLocalEnvironment.File[]) THEN
		SET Environment.Variables.AuditData.AuditMessage = 'N/A';
		SET Environment.Variables.AuditData.transaction_Level =COALESCE(Environment.Variables.Log.TransactionLevel, 'N/A');
		SET Environment.Variables.AuditData.PutApplName = COALESCE(InputLocalEnvironment.File.Directory, 'N/A');
		SET Environment.Variables.AuditData.comm_protocol = 'FTP';
		SET Environment.Variables.AuditData.uniqueID = COALESCE(Environment.Variables.Log.uniqueID, 'N/A');

	ELSEIF EXISTS(InputRoot.MQMD[]) THEN
		SET Environment.Variables.AuditData.PutApplName = COALESCE(FIELDVALUE(InputRoot.MQMD.PutApplName), 'N/A');
		SET Environment.Variables.AuditData.transaction_Level =COALESCE(Environment.Variables.Log.TransactionLevel, 'N/A');
		SET Environment.Variables.AuditData.comm_protocol = 'MQ';
		SET Environment.Variables.AuditData.AuditMessage = 'N/A';
		SET Environment.Variables.AuditData.uniqueID =COALESCE(SUBSTRING(CAST(InputRoot.MQMD.MsgId AS CHAR) FROM 3 FOR 48), 'N/A');
		
	ELSEIF(EXISTS(InputRoot.HTTPInputHeader[])) THEN
	
		SET Environment.Variables.AuditData.AuditMessage = 'N/A';
		SET Environment.Variables.AuditData.PutApplName = COALESCE(FIELDVALUE(InputRoot.HTTPInputHeader."X-Original-HTTP-Command"), 'N/A');
		SET Environment.Variables.AuditData.transaction_Level =COALESCE(Environment.Variables.Log.TransactionLevel, 'N/A');
		SET Environment.Variables.AuditData.comm_protocol = 'HTTP';
		SET Environment.Variables.AuditData.uniqueID =COALESCE(Environment.Variables.Log.uniqueID, 'N/A');
		
	ELSE
		
		SET Environment.Variables.AuditData.uniqueID = COALESCE(Environment.Variables.Log.uniqueID, 'N/A') ;
		SET Environment.Variables.AuditData.AuditMessage = COALESCE(Environment.Variables.Log.AuditMessage, 'N/A');
		SET Environment.Variables.AuditData.PutApplName = COALESCE(Environment.Variables.Log.PutApplName, 'N/A');
		SET Environment.Variables.AuditData.transaction_Level =COALESCE(Environment.Variables.Log.TransactionLevel, 'N/A');
		SET Environment.Variables.AuditData.comm_protocol = 'N/A';
		
	END IF;
		IF Environment.Variable.CNF_VAL = 3 THEN 
			CALL CHECK_PARSING_FORMATS();
		END IF ; 

		SET OutputRoot.XMLNSC.AuditHdr.UniqueID = COALESCE(Environment.Variables.AuditData.uniqueID, 'N/A') ;
		SET OutputRoot.XMLNSC.AuditHdr.AuditTime = CAST(convertedTimeStamp AS CHARACTER FORMAT 'IU') ;
		SET OutputRoot.XMLNSC.AuditHdr.TransactionPoint = COALESCE(Environment.Variables.AuditData.transaction_Level, 'N/A') ;
		SET OutputRoot.XMLNSC.AuditHdr.Source = COALESCE(Environment.Variables.AuditData.PutApplName, 'N/A') ;
		SET OutputRoot.XMLNSC.AuditHdr.BrokerName = BrokerName ;
		SET OutputRoot.XMLNSC.AuditHdr.ComponentName = ExecutionGroupLabel ;
		SET OutputRoot.XMLNSC.AuditHdr.ServiceName = MessageFlowLabel ;
		IF Environment.Variable.CNF_VAL = 3 THEN
			IF EXISTS(InputRoot.XMLNSC[]) THEN
				SET OutputRoot.XMLNSC.AuditHdr.(XMLNSC.CDataField)Payload = COALESCE(Environment.Variables.AuditData.wholeMsgChar, 'N/A') ;
			ELSE
				SET OutputRoot.XMLNSC.AuditHdr.Payload = COALESCE(Environment.Variables.AuditData.wholeMsgChar, 'N/A') ;
			END IF;
		ELSE 
			SET OutputRoot.XMLNSC.AuditHdr.Payload = 'N/A';
		END IF;
		SET OutputRoot.XMLNSC.AuditHdr.AuditMessage = COALESCE(Environment.Variables.AuditData.AuditMessage, 'N/A') ;
		SET OutputRoot.XMLNSC.AuditHdr.CommProtocol = COALESCE(Environment.Variables.AuditData.comm_protocol, 'N/A') ;
		
		
END;

CREATE PROCEDURE CHECK_PARSING_FORMATS() BEGIN
	DECLARE wholeMsgBlob BLOB ;
	DECLARE wholeMsgChar,PutApplName,uniqueID, AuditMessage CHARACTER ;
	IF (FIELDNAME(InputRoot.*[<]) = 'BLOB') THEN
		IF Environment.Variables.AuditData.wholeMsgChar IS NOT NULL OR Environment.Variables.AuditData.wholeMsgChar <> '' THEN
		ELSE
			SET Environment.Variables.AuditData.wholeMsgBlob = InputRoot."BLOB"."BLOB";
			SET Environment.Variables.AuditData.wholeMsgChar = CAST(Environment.Variables.AuditData.wholeMsgBlob AS CHARACTER 
																CCSID InputRoot.Properties.CodedCharSetId ENCODING InputRoot.Properties.Encoding 
																DEFAULT 'Error while casting payload from BLOB to CHAR');
		END IF ;
	ELSEIF (FIELDNAME(InputRoot.*[<]) = 'DFDL') THEN
		IF Environment.Variables.AuditData.wholeMsgChar IS NOT NULL OR Environment.Variables.AuditData.wholeMsgChar <> '' THEN
		ELSE
			SET Environment.Variables.AuditData.wholeMsgBlob = ASBITSTREAM(InputRoot.DFDL ENCODING InputRoot.Properties.Encoding CCSID InputRoot.Properties.CodedCharSetId
																			SET InputRoot.Properties.MessageSet TYPE InputRoot.Properties.MessageType
																			FORMAT InputRoot.Properties.MessageFormat);
			SET Environment.Variables.AuditData.wholeMsgChar = CAST(Environment.Variables.AuditData.wholeMsgBlob AS CHARACTER 
															   CCSID InputRoot.Properties.CodedCharSetId ENCODING InputRoot.Properties.Encoding
															   DEFAULT 'Error while casting payload from BLOB to CHAR');
		END IF ;
	ELSEIF EXISTS(InputRoot.MRM[]) THEN
		IF Environment.Variables.AuditData.wholeMsgChar IS NOT NULL OR Environment.Variables.AuditData.wholeMsgChar <> '' THEN
		ELSE
			SET Environment.Variables.AuditData.wholeMsgBlob = ASBITSTREAM(InputRoot.MRM ENCODING InputRoot.Properties.Encoding CCSID InputRoot.Properties.CodedCharSetId
																			SET InputRoot.Properties.MessageSet TYPE InputRoot.Properties.MessageType
																			FORMAT InputRoot.Properties.MessageFormat);
			SET Environment.Variables.AuditData.wholeMsgChar = CAST(Environment.Variables.AuditData.wholeMsgBlob AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId 
															   ENCODING InputRoot.Properties.Encoding DEFAULT 'Error while casting payload from BLOB to CHAR');
		END IF ;
	ELSEIF EXISTS(InputRoot.XMLNSC[]) OR EXISTS(InputRoot.XMLNS[]) OR EXISTS(InputRoot.XML[]) THEN
		IF Environment.Variables.AuditData.wholeMsgChar IS NOT NULL OR Environment.Variables.AuditData.wholeMsgChar <> '' THEN
		ELSE 
			SET Environment.Variables.AuditData.wholeMsgBlob = ASBITSTREAM(InputRoot.XMLNSC ENCODING InputRoot.Properties.Encoding CCSID InputRoot.Properties.CodedCharSetId
																			SET InputRoot.Properties.MessageSet TYPE InputRoot.Properties.MessageType
																			FORMAT InputRoot.Properties.MessageFormat);
			SET Environment.Variables.AuditData.wholeMsgChar = CAST(Environment.Variables.AuditData.wholeMsgBlob AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId 
															   ENCODING InputRoot.Properties.Encoding DEFAULT 'Error while casting payload from BLOB to CHAR');
		END IF;
	ELSEIF EXISTS(InputRoot.SOAP[] ) THEN
		IF Environment.Variables.AuditData.wholeMsgChar IS NOT NULL OR Environment.Variables.AuditData.wholeMsgChar <> '' THEN
		ELSE 
			SET Environment.Variables.AuditData.wholeMsgBlob = ASBITSTREAM(InputRoot.SOAP ENCODING InputRoot.Properties.Encoding CCSID InputRoot.Properties.CodedCharSetId
																			SET InputRoot.Properties.MessageSet TYPE InputRoot.Properties.MessageType
																			FORMAT InputRoot.Properties.MessageFormat);
			SET Environment.Variables.AuditData.wholeMsgChar = CAST(Environment.Variables.AuditData.wholeMsgBlob AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId 
															   ENCODING InputRoot.Properties.Encoding DEFAULT 'Error while casting payload from BLOB to CHAR');
		END IF;
	END IF;

END;
END MODULE;